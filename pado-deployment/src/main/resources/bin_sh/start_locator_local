#!/bin/bash

# ========================================================================
# Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

. ./setenv.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
   if [ "$IS_LOCATOR_START" == "false" ]; then
      exit
   fi
fi
. ./all_env.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi
. ./argenv.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi

if [ "$HELP" == "true" ]; then
   echo "Usage:"
   echo ""
   echo "  Starts a locator in the specified grid and site. Unlike start_locator, this"
   echo "  command executes locally."
   echo ""
   echo "   start_locator_local [-num <locator number>] [-grid $GRIDS_OPT] [-site $SITES_OPT] [-pid|-clean] [-quiet] [-?]"
   echo ""
   echo "      <locator number> Locator number 1-99 ($GRID-$SITE: `getLocatorNumberRange`)"
   echo "                       If the locator number is 'auto', i.e., -num auto, then"
   echo "                       the locator number is automatically determined."
   echo "      -grid      Starts the locator in the specified grid. Default: ${GRID_DEFAULT}"
   echo "      -site      Starts the locator in the specified site. Default: ${SITE_DEFAULT}"
   echo "      -clean     Cleans the working directory only if the locator is not running."
   echo "      -pid       Removes only the locator PID and Pulse files if the locator is not running."
   echo "      -quiet     Quiet mode. Suppresses verbose."
   echo ""
   echo "   Default: start_locator_local -num 1 -grid $GRID_DEFAULT -site $SITE_DEFAULT"
   echo ""
   exit
fi

. ${GRIDS_DIR}/${GRID}/site_${SITE}.sh > /dev/null 2>&1

# Source in override_env.sh if exists. This file is typically used
# to override env variables.
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi

# the parent directory of all servers
if [ "$RUN_DIR" == "" ]; then
   RUN_DIR=$BASE_DIR/run
fi

#
# If auto, then determine the locator number 
#
if [ "$SERVER_NUM" == "auto" ]; then
   #
   # Target host
   #
   # LocatorArray elements:
   #    array[0] LocatorNumber
   #    array[1] Host
   #    array[2] LocatorPort
   #    array[3] JmxRmiPort
   #    array[4] JmxHttpPort
   setLineArray $GRIDS_DIR/$GRID/locator_${SITE}.sh
   for (( i = 1; i <= $LAST_SERVER_NUM; i++ ))
   do
      line="${LineArray[$i]}"
      array=($line)
      SERVER_NUM=${array[0]}
      if [ "$SERVER_NUM" == "" ]; then
         continue;
      fi
      if [ $SERVER_NUM -lt 10 ]; then
         SERVER_NUM=0$SERVER_NUM
      fi
      # Set SERVER_NUM_NO_LEADING_ZERO
      if [[ $SERVER_NUM == 0* ]]; then
         SERVER_NUM_NO_LEADING_ZERO=${SERVER_NUM:1};
      else
         SERVER_NUM_NO_LEADING_ZERO=$SERVER_NUM
      fi
      LOCATOR_HOST=${array[1]}
      if [ "$LOCATOR_HOST" == "localhost" ]; then
         LOCATOR_HOST=`hostname`
         MY_ADDRESS=$LOCATOR_HOST
      fi
      LOCATOR_PORT=${array[2]}
      JMX_MANAGER_PORT=${array[3]}
      JMX_MANAGER_HTTP_PORT=${array[4]}
      LOCATOR_ID=locator-${GRID}-${SITE}${SERVER_NUM}

      # If locator is already running then exit
      locators=`$JAVA_HOME/bin/jps -v | grep "pado.home.dir=${PADO_HOME}" | grep "pado.vm.id=${LOCATOR_ID}" | grep java | awk '{print $1}'`
      lpids=""
      for j in $locators; do
         lpids="$j $lpids"
      done
      if [ "$lpids" != "" ]; then
          # Locator is already running. Continue to next locator.
          if [ "$QUIET" != "true" ]; then
             echo "$LOCATOR_ID already running. Skipping..."
          fi
          LOCATOR_HOST=""
          IS_LOCATOR_ALREADY_RUNNNIG=true
          continue
      fi

      if [ "$LOCATOR_HOST" == "$MY_ADDRESS" ]; then
         break
      fi
   done
   if [ "$LOCATOR_HOST" != "$MY_ADDRESS" ] && [ "$LOCATOR_HOST" != "localhost" ]; then
      if [ "$IS_LOCATOR_ALREADY_RUNNNIG" != "true" ]; then
         if [ "$QUIET" != "true" ]; then
            echo "This host is not configured to run locator. Aborted."
         fi
      fi
      exit
   fi
fi

# Need to source in override_env.sh once more for overriding
# LOCATOR_ID. override_env.sh can provide SERVER_NUM to override
# LOCATOR_ID.
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
   LOCATOR_ID=locator-${GRID}-${SITE}${SERVER_NUM}
fi

# directory in which the locator to be run
DIR=$RUN_DIR/${LOCATOR_ID}
if [ -d $DIR ]; then
   if [ "$CLEAN" == "true" ] || [ "$PID" == "true" ]; then
      locators=`$JAVA_HOME/bin/jps -v | grep "pado.home.dir=${PADO_HOME}" | grep "pado.vm.id=${LOCATOR_ID}" | grep java | awk '{print $1}'`
      lpids=""
      for j in $locators; do
         lpids="$j $lpids"
      done
      if [ "$lpids" == "" ]; then
         # clean only if the locator is not running
         if [ "$CLEAN" == "true" ]; then
            rm -rf $DIR
         elif [ "$PID" == "true" ]; then
            rm $DIR/vf.gf.locator.pid
            rm $DIR/pulse*
         fi 
      fi
   fi
fi
if [ ! -d $DIR ]; then
  mkdir -p $DIR
fi

LOCATORS=`getGemfireLocators`
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi
LOCATOR_NUM_NO_LEADING_ZERO=$SERVER_NUM_NO_LEADING_ZERO

# LocatorArray elements:
#    array[0] LocatorNumber
#    array[1] LocatorHost
#    array[2] LocatorPort
#    array[3] JmxRmiPort
#    array[4] JmxHttpPort
setLineArray $GRIDS_DIR/$GRID/locator_${SITE}.sh
line="${LineArray[$LOCATOR_NUM_NO_LEADING_ZERO]}"
array=($line)
LOCATOR_PORT=${array[2]}

JMX_MANAGER_PORT=${array[3]}
JMX_MANAGER_HTTP_PORT=${array[4]}

GEMFIRE_REMOTE_LOCATORS=
if [ "$REMOTE_LOCATORS" != "" ]; then
   GEMFIRE_REMOTE_LOCATORS="--J='-Dgemfire.remote-locators=${REMOTE_LOCATORS}'"
fi

if [ "$LOCATOR_HEAP_MAX" == "" ]; then
   LOCATOR_HEAP_MAX=256m
fi 

JVM_PROPERTIES="--J=-Xms${LOCATOR_HEAP_MAX} --J=-Xmx${LOCATOR_HEAP_MAX}"
if [ "$JAVA_VERSION" != "8" ]; then
   JVM_PROPERTIES="--J=-XX:PermSize=64m --J=-XX:MaxPermSize=64m $JVM_PROPERTIES"
fi


# ---------------------------------------------------------------------------
# Security file paths if enabled
# ---------------------------------------------------------------------------
if [ "$GEMFIRE_PROPERTY_FILE" == "" ]; then
   GEMFIRE_PROPERTY_FILE=$ETC_GRID_DIR/server.properties
fi
if [ "$SERVER_SECURITY_PROPERTY_FILE" == "" ]; then
   SERVER_SECURITY_PROPERTY_FILE=$ETC_GRID_DIR/gfsecurity.properties
fi

#
# Check if security is enabled
#
GEMFIRE_SECURITY_PROPERTY_SYSTEM=
if [ -f $SERVER_SECURITY_PROPERTY_FILE ]; then
   if [ "$SECURITY_ENABLED" == "true" ]; then
      GEMFIRE_SECURITY_PROPERTY_SYSTEM=--security-properties-file=$SERVER_SECURITY_PROPERTY_FILE
   fi
else
   if [ "$SECURITY_ENABLED" == "true" ]; then
      echo ""
      echo "Security is enabled but the following security file does not exist:"
      echo "   $SERVER_SECURITY_PROPERTY_FILE"
      echo "start_server Aborted."
      echo ""
      exit
   fi
fi
if [ "$SECURITY_ENABLED" == "true" ]; then
   SECURITY_PROPERTIES=--J=-Dpado.security.enabled=true
else
   SECURITY_PROPERTIES=--J=-Dpado.security.enabled=false
fi
SECURITY_PROPERTIES="$SECURITY_PROPERTIES $GEMFIRE_SECURITY_PROPERTY_SYSTEM"


GEMFIRE_PROPERTIES="--J=-Dgemfire.distributed-system-id=${SYSTEM_ID} ${GEMFIRE_REMOTE_LOCATORS} --J=-Dgemfire.jmx-manager=$JMX_MANAGER_ENABLED --J=-Dgemfire.jmx-manager-port=${JMX_MANAGER_PORT} --J=-Dgemfire.jmx-manager-http-port=${JMX_MANAGER_HTTP_PORT}"
# Do not bind localhost
if [ "$SERVER_BIND_ADDRESS" != "localhost" ]; then
   GEMFIRE_PROPERTIES="$GEMFIRE_PROPERTIES --J=-Dgemfire.bind-address=$SERVER_BIND_ADDRESS"
fi

# ---------------------------------------------------------------------------

# Unset the class path picked up from setenv.sh
export CLASSPATH=

pushd $DIR > /dev/null 2>&1
echo "*****************************************************"
echo "Starting ${LOCATOR_ID} on host ${MY_ADDRESS}:$LOCATOR_PORT..."
echo "*****************************************************"
echo gfsh start locator --name=${LOCATOR_ID} --locators=$LOCATORS --dir=$DIR --port=$LOCATOR_PORT --J=-Dpado.vm.id=${LOCATOR_ID} --J=-Dpado.home.dir=$PADO_HOME $JVM_PROPERTIES $GEMFIRE_PROPERTIES $SECURITY_PROPERTIES --properties-file=$GEMFIRE_PROPERTY_FILE --J=-Dpulse.Log-File-Name=pulse --J=-Dpulse.Log-File-Location=.
gfsh start locator --name=${LOCATOR_ID} --locators=$LOCATORS --dir=$DIR --port=$LOCATOR_PORT --J=-Dpado.vm.id=${LOCATOR_ID} --J=-Dpado.home.dir=$PADO_HOME $JVM_PROPERTIES $GEMFIRE_PROPERTIES $SECURITY_PROPERTIES --properties-file=$GEMFIRE_PROPERTY_FILE --J=-Dpulse.Log-File-Name=pulse --J=-Dpulse.Log-File-Location=.
popd > /dev/null 2>&1

#!/bin/bash

# ========================================================================
# Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

pushd .. > /dev/null 2>&1
. ./setenv.sh > /dev/null 2>&1
. ./all_env.sh > /dev/null 2>&1
. ./argenv.sh > /dev/null 2>&1
. ${GRIDS_DIR}/${GRID}/site_${SITE}.sh > /dev/null 2>&1
popd > /dev/null 2>&1

# Check for script help
if [ "$1" == "-?" ]; then
   echo "Usage:"
   echo "   ./deploy_data_files_input <fromDirPath>"
   echo "                       -hosts <list of hosts>"
   echo "                       -servers <list of server names>"
   echo "                       [-prefix filePrefix]"
   echo "                       [-site $SITES_OPT]"
   echo "                       [-debug] [-?]"
   echo "   Deploys files in <fromDirPath> to servers. Each server receives zero"
   echo "   or more unique files in their data file directory, which is by default"
   echo "   in their working directory, i.e., run/<server-name>/data."
   echo ""
   echo "      -hosts Space separated host names."
   echo "      -servers Space separated server names (ids)."
   echo "      -prefix If specified, then all file names beginning with the"
   echo "              prefix are moved from fromDirPath to toDirPath."
   echo "              If unspecified then all files in fromDirPath are moved"
   echo "              to toDirPath."
   echo "      -debug Print copy commands but do not execute them."
   echo "   Default: ./deploy_data_files_input <fromDirPath> -hosts <list of hosts> -server <list of server names>-hosts <list of hosts> -server <list of server names> -prefix <all files in fromDirPath> -site $SITE_DEFAULT"
   echo ""
exit
fi
 
# Check if file path specified
if [ "$1" == "" ]; then
   echo ""
   echo "Must specify the file path"
   echo ""
   exit
fi
# Check host names
if [ "$HOST_NAMES" == "" ]; then
   echo ""
   echo "Must specify the -hosts option"
   echo ""
   exit
fi
# Check host names
if [ "$SERVER_NAMES" == "" ]; then
   echo ""
   echo "Must specify the -servers option"
   echo ""
   exit
fi
 
INPUT="$1"
 
if [ "$DEBUG" == "true" ]; then
   echo ""
   echo "Debug mode (-debug). The following commands are"
   echo "for display only. Files are not copied."
fi
 
SERVER_HOSTS=$HOST_NAMES
NUM_HOSTS=0
for i in $SERVER_HOSTS; do
   let NUM_HOSTS=NUM_HOSTS+1
done
NUM_SERVERS=0
echo SERVER_NAMES=$SERVER_NAMES
for i in $SERVER_NAMES; do
   SERVER_NAME_ARRAY[NUM_SERVERS]=$i
   let NUM_SERVERS=NUM_SERVERS+1
done
let NUM_SERVERS_PER_HOST=NUM_SERVERS/NUM_HOSTS
let NUM_SERVERS=NUM_SERVERS_PER_HOST*NUM_HOSTS

#
# Determine the total number of files
#
FILE_PREFIX=$PREFIX
NUM_FILES=0
for file in ${INPUT}/${FILE_PREFIX}*
do
   FILE_ARRAY[NUM_FILES]=$file
   let NUM_FILES=NUM_FILES+1
done
# echo "array size = ${#FILE_ARRAY[@]}"
 
#
# Determine the number of files per server.
#
if [[ ${FILE_ARRAY[$INDEX]} == *\** ]]; then
   echo ""
   echo "No files found."
   echo ""
   exit
fi
#echo NUM_FILES=$NUM_FILES
 
let NUM_FILES_PER_SERVER=NUM_FILES/NUM_SERVERS
let REMAINDER="$NUM_FILES%$NUM_SERVERS"
if [ "$REMAINDER" != "0" ]; then
   let NUM_FILES_PER_SERVER=NUM_FILES_PER_SERVER+1
fi
if [ "$NUM_FILES_PER_SERVER" == "0" ]; then
   let NUM_FILES_PER_SERVER=1
fi
#echo NUM_SERVERS=$NUM_SERVERS
#echo NUM_SERVERS_PER_HOST=$NUM_SERVERS_PER_HOST
#echo NUM_FILES_PER_SERVER=$NUM_FILES_PER_SERVER
 
echo ""
echo "Deploying $NUM_FILES files to $NUM_SERVERS servers."
echo "Each server receives $NUM_FILES_PER_SERVER or less files."
echo ""

SERVER_INDEX=0
FILE_INDEX=0
SERVER_NUM=0
for i in $SERVER_HOSTS
do
   HOST_NAME=`ssh -q -n $i "hostname"`
   SERVER_NAME=${SERVER_NAME_ARRAY[$SERVER_INDEX]}
   TO_DIR=$RUN_DIR/$SERVER_NAME/data
   for (( c=1; c<=${NUM_FILES_PER_SERVER}; c++ ))
   do
      echo scp -q -o stricthostkeychecking=no $RECURSIVE ${FILE_ARRAY[$FILE_INDEX]} $SSH_USER@$i:$TO_DIR
      if [ "$DEBUG" != "true" ]; then
         scp -q -o stricthostkeychecking=no $RECURSIVE ${FILE_ARRAY[$FILE_INDEX]} $SSH_USER@$i:$TO_DIR
      fi
      let FILE_INDEX=FILE_INDEX+1
      if [ "$FILE_INDEX" -ge "$NUM_FILES" ]; then
         break;
      fi
   done
   let SERVER_INDEX=SERVER_INDEX+1
done

echo ""
echo "File deployment complete."
echo ""

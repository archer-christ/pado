#!/bin/bash

# ========================================================================
# Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

#
# Source in the env files from the pado directory
#
PADO_SHELL_DIR=`dirname $0`
pushd $PADO_SHELL_DIR > /dev/null 2>&1 
. ./setenv.sh > /dev/null 2>&1
. ./all_env.sh > /dev/null 2>&1
. ./argenv.sh > /dev/null 2>&1
popd > /dev/null 2>&1

#
# Set properties
#

# Uncomment below to enable jline debug
#JLINE_PROPERTIES="-Djline.internal.Log.debug=true -Djline.internal.Log.trace=true"

# Uncomment below to enable PadoShell debug - prints stack trace if error
PADO_DEBUG_PROPERTIES="-Dpado.debug=true"

#
# Gemfire properties
#
GEMFIRE_PROPERTIES_FILE="$HOME/.pado/etc/client.properties"
if [ ! -f $GEMFIRE_PROPERTIES_FILE  ]; then
   GEMFIRE_PROPERTIES_FILE="$ETC_DIR/client/client.properties"
fi

GEMFIRE_PROPERTIES="-DgemfirePropertyFile=$GEMFIRE_PROPERTIES_FILE"

GEMFIRE_SECURITY_PROPERTY_FILE="$HOME/.pado/etc/gfsecurity.properties"
if [ ! -f $GEMFIRE_SECURITY_PROPERTY_FILE ]; then
   GEMFIRE_SECURITY_PROPERTY_FILE=$ETC_DIR/client/gfsecurity.properties
fi

#
# Check if security is enabled
#
GEMFIRE_SECURITY_PROPERTY_SYSTEM=
if [ -f $GEMFIRE_SECURITY_PROPERTY_FILE ]; then
   if [ "$SECURITY_ENABLED" == "true" ]; then
      GEMFIRE_SECURITY_PROPERTY_SYSTEM=-DgemfireSecurityPropertyFile=$GEMFIRE_SECURITY_PROPERTY_FILE
   fi
else
   if [ "$SECURITY_ENABLED" == "true" ]; then
      echo ""
      echo "Security is enabled but the following security file does not exist:"
      echo "   $GEMFIRE_SECURITY_PROPERTY_FILE"
      echo "pado Aborted."
      echo ""
      exit
   fi
fi
if [ "$SECURITY_ENABLED" == "true" ]; then
   SECURITY_PROPERTIES=-Dpado.security.enabled=true
else
   SECURITY_PROPERTIES=-Dpado.security.enabled=false
fi

if [ "$SECURITY_ENABLED" == "true" ]; then
   GEMFIRE_SECURITY_PROPERTY_SYSTEM="$GEMFIRE_SECURITY_PROPERTY_SYSTEM -Dgemfire.security-client-auth-init=com.netcrest.pado.gemfire.security.PadoAuthInit.create"
fi
SECURITY_PROPERTIES="$SECURITY_PROPERTIES $GEMFIRE_SECURITY_PROPERTY_SYSTEM"

#
# Pado properties
#
PADO_PROPERTIES_FILE=$HOME/.pado/etc/pado.properties
if [ ! -f $PADO_PROPERTIES_FILE ]; then
   PADO_PROPERTIES_FILE="$ETC_DIR/client/pado.properties"
fi    

PADO_TOOLS_JAR=`ls $BASE_DIR/lib/ | grep pado-tools`
PADO_PROPERTIES="-Dpado.server=false -Dpado.properties=$PADO_PROPERTIES_FILE -Dpado.command.jar.path=$BASE_DIR/lib/$PADO_TOOLS_JAR $PADO_DEBUG_PROPERTIES -Dpado.security.aes.userCertificate=$SECURITY_DIR/user.cer -Dpado.security.keystore.path=$SECURITY_DIR/client/client-user.keystore"

#
# Plugins directory
#
# Append all jar files found in the $BASE_DIR/plugins directory and
# its subdirectories in the class path.
#
PLUGINS_JARS=
for file in `find $PADO_PLUGINS_DIR -maxdepth 1 -name *.jar |sort -r`
do
  if [ "${PLUGINS_JARS}" != "" ]; then
    PLUGINS_JARS=${PLUGINS_JARS}:${file}
  else
    PLUGINS_JARS=${file}
  fi
done
if [ "${PLUGINS_JARS}" != "" ]; then
   CLASSPATH=$CLASSPATH:$PLUGINS_JARS
fi

#
# Append all jar files found in the directory
# specified by the -jar option.
#
JAR_OPT_JARS=
if [ "$JAR_OPT" != "" ]; then
   if [ ! -d $JAR_OPT ]; then
      echo "pado: $JAR_OPT: Specified directory does not exist."
      exit
   fi
   for file in `find $JAR_OPT -name *.jar`
   do
     if [ "${JAR_OPT_JARS}" != "" ]; then
       JAR_OPT_JARS=${JAR_OPT_JARS}:${file}
     else
       JAR_OPT_JARS=${file}
     fi
   done
   if [ "${JAR_OPT_JARS}" != "" ]; then
      CLASSPATH=$CLASSPATH:$JAR_OPT_JARS
   fi
fi
if [ "$CLEAN" != "" ]; then
   rm $HOME/.pado/log/*.log > /dev/null 2>&1
   rm $HOME/.pado/stats/*.gfs > /dev/null 2>&1
   echo "PadoShell log and stats files removed from $HOME/.pado/log, $HOME/.pado/stats"
else
   if [ "$DIR" != "" ]; then
      pushd $DIR > /dev/null 2>&1 
   fi

   $GF_JAVA -Xms512m -Xmx512m -Djava.awt.headless=true $JLINE_PROPERTIES $GEMFIRE_PROPERTIES $SECURITY_PROPERTIES $PADO_PROPERTIES com.netcrest.pado.tools.pado.PadoShell $*
   
   if [ "$DIR" != "" ]; then
      popd > /dev/null 2>&1
   fi
fi

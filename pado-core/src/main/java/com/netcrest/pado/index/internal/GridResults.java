/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.index.internal;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.netcrest.pado.index.result.IGridResults;
import com.netcrest.pado.index.result.ResultItem;
import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;

public class GridResults implements IGridResults, DataSerializable
{

	private static final long serialVersionUID = 1L;

	private int[] bucketIds;

	private List<?> aggregatedSortedResults = new ArrayList();

	private int totalServerResults = 0;

	private int nextResultIndex = Constants.END_OF_LIST;

	public void setBucketIds(int[] bucketIds)
	{
		this.bucketIds = bucketIds;
	}

	public int[] getBucketIds()
	{
		return bucketIds;
	}

	public List<?> getAggregatedSortedResults()
	{
		return aggregatedSortedResults;
	}

	public void setAggregatedSortedResults(List<ResultItem<DataSerializable>> aggregated)
	{
		this.aggregatedSortedResults = aggregated;
	}

	public int getTotalServerResults()
	{
		return totalServerResults;
	}

	public void setTotalServerResults(int totalServerResults)
	{
		this.totalServerResults = totalServerResults;
	}

	public int getNextResultIndex()
	{
		return nextResultIndex;
	}

	public void setNextResultIndex(int nextResultIndex)
	{
		this.nextResultIndex = nextResultIndex;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	@Override
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		bucketIds = DataSerializer.readIntArray(input);
		aggregatedSortedResults = DataSerializer.readArrayList(input);
		totalServerResults = DataSerializer.readPrimitiveInt(input);
		nextResultIndex = DataSerializer.readPrimitiveInt(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	@Override
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeIntArray(bucketIds, output);
		DataSerializer.writeArrayList((ArrayList) aggregatedSortedResults, output);
		DataSerializer.writePrimitiveInt(totalServerResults, output);
		DataSerializer.writePrimitiveInt(nextResultIndex, output);
	}

}

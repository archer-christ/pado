package com.gemstone.gemfire.addon.command;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.addon.util.DataSerializerEx;

/**
 * CommandResults contains the results obtained from executing a CommandTask. It
 * may also contain error code and/or exception generated by the server.
 * 
 * @author dpark
 * 
 */
public class CommandResults implements DataSerializable {
	private static final long serialVersionUID = 1L;

	public static final byte CODE_NORMAL = 0;
	public static final byte CODE_ERROR = -1;

	private byte code = CODE_NORMAL;
	private String codeMessage = "";
	private String exception = "";
	// dataObject is currently unsupported
	private Object dataObject;
	
	/**
	 * Creates a new CommandResults. CommandResults.setDataObject() to set the
	 * data object that contains the task results.
	 */
	public CommandResults() {
	}

	/**
	 * Creates a new CommandResults object with the data object contains
	 * results. dataObject is currently unsupported.
	 * 
	 * @param dataObject
	 *            The data object that contains the task results.
	 */
	public CommandResults(Object dataObject) {
		this.dataObject = dataObject;
	}

	/**
	 * Returns the results set by CommandTask. 
	 * dataObject is currently unsupported.
	 */
	public Object getDataObject() {
		return dataObject;
	}

	/**
	 * Returns the code set by the CommandTask. It is typically used for sending
	 * error code. The default value is CODE_NORMAL or 0.
	 */
	public byte getCode() {
		return code;
	}

	/**
	 * Sets the message code.
	 * @param code Message code. CODE_NORMAL (0), CODE_ERROR(-1), or application specified.
	 */
	public void setCode(byte code) {
		this.code = code;
	}

	/**
	 * Returns the message associated with the code. The default value is null.
	 */
	public String getCodeMessage() {
		return codeMessage;
	}

	/**
	 * Sets the code message.
	 * @param codeMessage The message associated with the code.
	 */
	public void setCodeMessage(String codeMessage) {
		this.codeMessage = codeMessage;
	}

	/**
	 * Returns the server exception if any.
	 */
	public Throwable getException() {
		return new Throwable(exception);
	}

	public void setException(Throwable exception) {
		this.exception = exception.getMessage();
	}

	public void setDataObject(Object dataObject) {
		this.dataObject = dataObject;
	}

	public void toData(DataOutput out) throws IOException {
		out.writeByte(code);
		DataSerializerEx.writeUTF(codeMessage, out);
//		DataSerializer.writeObject(dataObject, out);
		DataSerializerEx.writeUTF(exception, out);
	}

	public void fromData(DataInput in) throws IOException,
			ClassNotFoundException {
		code = in.readByte();
		codeMessage = DataSerializerEx.readUTF(in);
//		dataObject = DataSerializer.readObject(in);
		exception = DataSerializerEx.readUTF(in);
	}

	@Override
	public String toString()
	{
//		return "CommandResults [dataObject=" + dataObject + ", code=" + code + ", codeMessage="
//				+ codeMessage + ", exception=" + exception + "]";
		return "CommandResults [code=" + code + ", codeMessage="
		+ codeMessage + ", exception=" + exception + "]";
	}

	
}

package com.gemstone.gemfire.addon.dq.internal;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.gemstone.gemfire.Instantiator;
import com.gemstone.gemfire.internal.util.BlobHelper;

/**
 * SerializedObject replaces the internal class {@link CachedDeserializable}. It is used to wrap serialized object
 * so that native clients are able to receive the object in the same serialized form.
 * @author dpark
 *
 */
public class SerializedObject implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	private byte[] value;
	private Object deserializedValue;

	public SerializedObject()
	{
	}

	public SerializedObject(byte[] value)
	{
		this.value = value;
	}

	/**
	 * Returns the serialized object in raw form.
	 */
	public byte[] getValue()
	{
		return value;
	}

	/**
	 * Sets the serialized object in raw form.
	 */
	public void setValue(byte[] value)
	{
		this.value = value;
	}

	/**
	 * Returns the deserialized object.
	 * @throws IOException Thrown if the serialized object is malformed.
	 * @throws ClassNotFoundException Thrown if the mapping class is not available.
	 */
	public Object getDeserializedObject() throws IOException, ClassNotFoundException
	{
		if (value == null) {
			return null;
		}
		if (deserializedValue == null)
			deserializedValue = BlobHelper.deserializeBlob(value);
		return deserializedValue;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		value = DataSerializer.readByteArray(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeByteArray(value, output);
	}

	public static void registerInstantiator(int id)
	{
		Instantiator.register(new Instantiator(SerializedObject.class, id) {
			public DataSerializable newInstance()
			{
				return new SerializedObject();
			}
		});
	}
}

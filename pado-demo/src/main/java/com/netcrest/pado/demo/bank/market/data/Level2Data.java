/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.demo.bank.market.data;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Date;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.internal.util.ReflectionUtil;

public class Level2Data implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	
	private String id;
	private String symbol;
	private String mmid;
	private String source;
	
	private int seqNum;
	private int quoteConditions;
	
	private double bid;
	private double bidSize;
	private double ask;
	private double askSize;
	
	private Date date;
	
	public String getId()
	{
		return id;
	}

	public void setId(String id)
	{
		this.id = id;
	}

	public String getSymbol()
	{
		return symbol;
	}

	public void setSymbol(String symbol)
	{
		this.symbol = symbol;
	}

	public String getMmid()
	{
		return mmid;
	}

	public void setMmid(String mmid)
	{
		this.mmid = mmid;
	}

	public String getSource()
	{
		return source;
	}

	public void setSource(String source)
	{
		this.source = source;
	}

	public int getSeqNum()
	{
		return seqNum;
	}

	public void setSeqNum(int seqNum)
	{
		this.seqNum = seqNum;
	}


	public int getQuoteConditions()
	{
		return quoteConditions;
	}

	public void setQuoteConditions(int quoteConditions)
	{
		this.quoteConditions = quoteConditions;
	}

	public double getBid()
	{
		return bid;
	}

	public void setBid(double bid)
	{
		this.bid = bid;
	}

	public double getBidSize()
	{
		return bidSize;
	}

	public void setBidSize(double bidSize)
	{
		this.bidSize = bidSize;
	}

	public double getAsk()
	{
		return ask;
	}

	public void setAsk(double ask)
	{
		this.ask = ask;
	}

	public double getAskSize()
	{
		return askSize;
	}

	public void setAskSize(double askSize)
	{
		this.askSize = askSize;
	}

	public Date getDate()
	{
		return date;
	}

	public void setDate(Date date)
	{
		this.date = date;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{		
		id = DataSerializer.readString(input);
		symbol = DataSerializer.readString(input);
		mmid = DataSerializer.readString(input);
		source = DataSerializer.readString(input);
		seqNum = DataSerializer.readPrimitiveInt(input);
		quoteConditions = DataSerializer.readPrimitiveInt(input);
		bid = DataSerializer.readPrimitiveDouble(input);
		bidSize = DataSerializer.readPrimitiveDouble(input);
		ask = DataSerializer.readPrimitiveDouble(input);
		askSize = DataSerializer.readPrimitiveDouble(input);
		date = DataSerializer.readDate(input);
	}

	
	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(id, output);
		DataSerializer.writeString(symbol, output);
		DataSerializer.writeString(mmid, output);
		DataSerializer.writeString(source, output);
		DataSerializer.writePrimitiveInt(seqNum, output);
		DataSerializer.writePrimitiveInt(quoteConditions, output);
		DataSerializer.writePrimitiveDouble(bid, output);
		DataSerializer.writePrimitiveDouble(bidSize, output);
		DataSerializer.writePrimitiveDouble(ask, output);
		DataSerializer.writePrimitiveDouble(askSize, output);
		DataSerializer.writeDate(date, output);
	}
	
	
	public String toString()
	{
		return ReflectionUtil.toStringGetters(this);
	}
}

package com.netcrest.pado.temporal.test.data;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Date;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;

public class NonTemporalPositionImpl implements ConcretePosition, DataSerializable
{
	private static final long serialVersionUID = 1L;

	String accountCd;
	Long accountId;
	BigDecimal accrualAm;
	Date asOfDt;
	BigDecimal bvAm;
	BigDecimal currFaceAm;
	Long fiImntId;
	String imntAltCd;

	BigDecimal mkPr;
	BigDecimal mvAm;
	BigDecimal navAm;
	BigDecimal orgFaceAm;
	BigDecimal parAm;
	String positionCd;
	BigDecimal tavAm;
	String uuid;

	public String getAccountCd()
	{
		return accountCd;
	}

	public void setAccountCd(String accountCd)
	{
		this.accountCd = accountCd;
	}

	public Long getAccountId()
	{
		return accountId;
	}

	public void setAccountId(Long accountId)
	{
		this.accountId = accountId;
	}

	public BigDecimal getAccrualAm()
	{
		return accrualAm;
	}

	public void setAccrualAm(BigDecimal accrualAm)
	{
		this.accrualAm = accrualAm;
	}

	public Date getAsOfDt()
	{
		return asOfDt;
	}

	public void setAsOfDt(Date asOfDt)
	{
		this.asOfDt = asOfDt;
	}

	public BigDecimal getBvAm()
	{
		return bvAm;
	}

	public void setBvAm(BigDecimal bvAm)
	{
		this.bvAm = bvAm;
	}

	public BigDecimal getCurrFaceAm()
	{
		return currFaceAm;
	}

	public void setCurrFaceAm(BigDecimal currFaceAm)
	{
		this.currFaceAm = currFaceAm;
	}

	public Long getFiImntId()
	{
		return fiImntId;
	}

	public void setFiImntId(Long fiImntId)
	{
		this.fiImntId = fiImntId;
	}

	public String getImntAltCd()
	{
		return imntAltCd;
	}

	public void setImntAltCd(String imntAltCd)
	{
		this.imntAltCd = imntAltCd;
	}

	public BigDecimal getMkPr()
	{
		return mkPr;
	}

	public void setMkPr(BigDecimal mkPr)
	{
		this.mkPr = mkPr;
	}

	public BigDecimal getMvAm()
	{
		return mvAm;
	}

	public void setMvAm(BigDecimal mvAm)
	{
		this.mvAm = mvAm;
	}

	public BigDecimal getNavAm()
	{
		return navAm;
	}

	public void setNavAm(BigDecimal navAm)
	{
		this.navAm = navAm;
	}

	public BigDecimal getOrgFaceAm()
	{
		return orgFaceAm;
	}

	public void setOrgFaceAm(BigDecimal orgFaceAm)
	{
		this.orgFaceAm = orgFaceAm;
	}

	public BigDecimal getParAm()
	{
		return parAm;
	}

	public void setParAm(BigDecimal parAm)
	{
		this.parAm = parAm;
	}

	public String getPositionCd()
	{
		return positionCd;
	}

	public void setPositionCd(String positionCd)
	{
		this.positionCd = positionCd;
	}

	public BigDecimal getTavAm()
	{
		return tavAm;
	}

	public void setTavAm(BigDecimal tavAm)
	{
		this.tavAm = tavAm;
	}

	public String getUuid()
	{
		return uuid;
	}

	public void setUuid(String uuid)
	{
		this.uuid = uuid;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		accountCd = DataSerializer.readString(input);
		accountId = DataSerializer.readLong(input);
		accrualAm = DataSerializer.readObject(input);
		asOfDt = DataSerializer.readDate(input);
		bvAm = DataSerializer.readObject(input);
		currFaceAm = DataSerializer.readObject(input);
		fiImntId = DataSerializer.readLong(input);
		imntAltCd = DataSerializer.readString(input);
		mkPr = DataSerializer.readObject(input);
		mvAm = DataSerializer.readObject(input);
		navAm = DataSerializer.readObject(input);
		orgFaceAm = DataSerializer.readObject(input);
		parAm = DataSerializer.readObject(input);
		positionCd = DataSerializer.readString(input);
		tavAm = DataSerializer.readObject(input);
		uuid = DataSerializer.readString(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(accountCd, output);
		DataSerializer.writeLong(accountId, output);
		DataSerializer.writeObject(accrualAm, output);
		DataSerializer.writeDate(asOfDt, output);
		DataSerializer.writeObject(bvAm, output);
		DataSerializer.writeObject(currFaceAm, output);
		DataSerializer.writeLong(fiImntId, output);
		DataSerializer.writeString(imntAltCd, output);
		DataSerializer.writeObject(mkPr, output);
		DataSerializer.writeObject(mvAm, output);
		DataSerializer.writeObject(navAm, output);
		DataSerializer.writeObject(orgFaceAm, output);
		DataSerializer.writeObject(parAm, output);
		DataSerializer.writeString(positionCd, output);
		DataSerializer.writeObject(tavAm, output);
		DataSerializer.writeString(uuid, output);
	}

}

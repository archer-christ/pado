/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.temporal.test.gemfire;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.IRoutingKey;

@SuppressWarnings("rawtypes")
public class PortfolioKey implements IRoutingKey, Comparable, DataSerializable
{
	private static final long serialVersionUID = 1L;
	
	private String identityKey;
	private Object routingKey;

	public PortfolioKey()
	{
	}

	public PortfolioKey(String identityKey, Object routingKey)
	{
		this.identityKey = identityKey;
		this.routingKey = routingKey;
	}


	@Override
	public Object getRoutingKey()
	{
		return routingKey;
	}
	
	public void setRoutingKey(String routingKey)
	{
		this.routingKey = routingKey;
	}

	@Override
	public String getIdentityKey()
	{
		return identityKey;
	}

	public void setIdentityKey(String identityKey)
	{
		this.identityKey = identityKey;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		identityKey = DataSerializer.readString(input);
		routingKey = DataSerializer.readObject(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(identityKey, output);
		DataSerializer.writeObject(routingKey, output);
	}

	/**
	 * Returns the hash code of this object.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public int hashCode()
	{
		int hash = 7;
		hash = 31 * hash + (this.identityKey == null ? 0 : this.identityKey.hashCode());
		return hash;
	}

	/**
	 * Returns true if the specified object equals this object.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PortfolioKey other = (PortfolioKey) obj;
		return (identityKey == other.identityKey || identityKey != null && identityKey.equals(other.identityKey));
	}

	@Override
	public String toString()
	{
		return "PortfolioKey [identityKey=" + identityKey + ", routingKey=" + routingKey + "]";
	}

	@Override
	public int compareTo(Object o)
	{
		if (o == null) {
			return 1;
		}
		if (this == o) {
			return 0;
		}
		if (o instanceof PortfolioKey) {
			return identityKey.compareTo(((PortfolioKey)o).identityKey);
		}
		return identityKey.compareTo(o.toString());
	}

}

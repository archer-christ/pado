/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.test.junit.context.impl;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.IUserPrincipal;
import com.netcrest.pado.data.KeyMap;
import com.netcrest.pado.data.jsonlite.JsonLite;
import com.netcrest.pado.test.junit.context.IPbmUserInfo;
import com.netcrest.pado.test.junit.context.data.PbmUserInfoKey;

@SuppressWarnings({ "rawtypes", "unchecked" })
public class PbmUserInfoImpl implements IPbmUserInfo, DataSerializable
{
	private static final long serialVersionUID = 1L;

	private KeyMap userInfoMap = new JsonLite(PbmUserInfoKey.getKeyType());
	private IUserPrincipal userPrincipal;

	public PbmUserInfoImpl()
	{
	}

	/**
	 * Clears all attributes
	 */
	@Override
	public void reset()
	{
		userInfoMap.clear();
	}

	@Override
	public Object getAttribute(String key)
	{
		return userInfoMap.get(key);
	}

	@Override
	public void setAttribute(String key, Object value)
	{
		userInfoMap.put(key, value);
	}

	@Override
	public Object getAttribute(PbmUserInfoKey userInfoKeyType)
	{
		return userInfoMap.get(userInfoKeyType);
	}

	@Override
	public void setAttribute(PbmUserInfoKey userInfoKeyType, Object value)
	{
		userInfoMap.put(userInfoKeyType, value);
	}

	@Override
	public void setUserPrincipal(IUserPrincipal userPrincipal)
	{
		this.userPrincipal = userPrincipal;
	}

	@Override
	public IUserPrincipal getUserPrincipal()
	{
		return userPrincipal;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		userInfoMap = DataSerializer.readObject(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeObject(userInfoMap, output);
	}
}

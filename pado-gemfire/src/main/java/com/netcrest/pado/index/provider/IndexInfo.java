/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.index.provider;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;

public class IndexInfo implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	private int bucketId;
	private int index;
	
	public IndexInfo() 
	{}
	
	/**
	 * @param bucketId
	 * @param index
	 */
	public IndexInfo(int bucketId, int index)
	{
		super();
		this.bucketId = bucketId;
		this.index = index;
	}

	public int getBucketId()
	{
		return bucketId;
	}

	public void setBucketId(int bucketId)
	{
		this.bucketId = bucketId;
	}

	public int getIndex()
	{
		return index;
	}

	public void setIndex(int index)
	{
		this.index = index;
	}

	@Override
	public String toString()
	{
		return "IndexInfo [bucketId=" + bucketId + ", index=" + index + "]";
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		bucketId = DataSerializer.readPrimitiveInt(input);
		index = DataSerializer.readPrimitiveInt(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writePrimitiveInt(bucketId, output);
		DataSerializer.writePrimitiveInt(index, output);
	}
	
	
}

/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.gemfire.info;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.gemstone.gemfire.cache.util.Gateway;
import com.netcrest.pado.info.GatewayInfo;

public class GemfireGatewayInfo extends GatewayInfo implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	
	private int concurrencyLevel;
	private String orderPolicy;
	private int socketBufferSize;
	private int socketReadTimeout;
	
	public GemfireGatewayInfo()
	{}
	
	public GemfireGatewayInfo(Gateway gateway)
	{
		concurrencyLevel = gateway.getConcurrencyLevel();
		gatewayHubId = gateway.getGatewayHubId();
		id = gateway.getId();
		orderPolicy = gateway.getOrderPolicy().toString();
		queueAttributesInfo = new GemfireGatewayQueueAttributesInfo(gateway.getQueueAttributes());
		queueSize = gateway.getQueueSize();
		socketBufferSize = gateway.getSocketBufferSize();
		socketReadTimeout = gateway.getSocketReadTimeout();
	}

	public int getConcurrencyLevel()
	{
		return concurrencyLevel;
	}

	public void setConcurrencyLevel(int concurrencyLevel)
	{
		this.concurrencyLevel = concurrencyLevel;
	}

	public String getOrderPolicy()
	{
		return orderPolicy;
	}

	public void setOrderPolicy(String orderPolicy)
	{
		this.orderPolicy = orderPolicy;
	}

	public int getSocketBufferSize()
	{
		return socketBufferSize;
	}

	public void setSocketBufferSize(int socketBufferSize)
	{
		this.socketBufferSize = socketBufferSize;
	}

	public int getSocketReadTimeout()
	{
		return socketReadTimeout;
	}

	public void setSocketReadTimeout(int socketReadTimeout)
	{
		this.socketReadTimeout = socketReadTimeout;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		concurrencyLevel = DataSerializer.readPrimitiveInt(input);
		gatewayHubId = DataSerializer.readString(input);
		id = DataSerializer.readString(input);
		orderPolicy = DataSerializer.readString(input);
		queueAttributesInfo = DataSerializer.readObject(input);
		queueSize = DataSerializer.readPrimitiveInt(input);
		socketBufferSize = DataSerializer.readPrimitiveInt(input);
		socketReadTimeout = DataSerializer.readPrimitiveInt(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writePrimitiveInt(concurrencyLevel, output);
		DataSerializer.writeString(gatewayHubId, output);
		DataSerializer.writeString(id, output);
		DataSerializer.writeString(orderPolicy, output);
		DataSerializer.writeObject(queueAttributesInfo, output);
		DataSerializer.writePrimitiveInt(queueSize, output);
		DataSerializer.writePrimitiveInt(socketBufferSize, output);
		DataSerializer.writePrimitiveInt(socketReadTimeout, output);
	}
}
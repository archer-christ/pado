/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.gemfire.info;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.gemfire.util.GemfireGridUtil;
import com.netcrest.pado.info.VirtualPathInfo;
import com.netcrest.pado.pql.VirtualPath;
import com.netcrest.pado.pql.VirtualPath2;

@SuppressWarnings({ "rawtypes", "unchecked" })
public class GemfireVirtualPathInfo extends VirtualPathInfo implements DataSerializable
{
	private static final long serialVersionUID = 1L;

	/**
	 * Constructs an empty GemfireVirtualPathInfo object. The caller is responsible for
	 * supplying virtual path attributes.
	 */
	public GemfireVirtualPathInfo()
	{
		this.isVirtualPath = true;
	}

	/**
	 * Constructs a RegionInfo object without the parent information. The caller
	 * must supply the parent information. It does not build the child list.
	 * 
	 * @param region
	 */
	public GemfireVirtualPathInfo(VirtualPath2 virtualPath)
	{
		init(virtualPath);
	}
	
	/**
	 * Constructs a PathInfo object without the parent information.
	 * 
	 * @param vp The virtual path from which VirtualPath attributes to be extracted.
	 * @param recursive true to include all children VirtualPathInfo objects or false
	 *            to include none. false is same as invoking {@link GemfireVirtualPathInfo#PathInfo(VirtualPath)}.
	 */
	public GemfireVirtualPathInfo(VirtualPath2 vp, boolean recursive)
	{
		init(vp);
		if (recursive) {
			List<VirtualPath2> vpList = vp.getChildVirtualPathList();
			for (VirtualPath2 vp2 : vpList) {
				createChild(vp2, this);
			}
		}
	}
	
	private void init(VirtualPath2 vp) 
	{
		this.name = vp.getPathName();
		this.fullPath = vp.getFullPath();
		this.isVirtualPath = true;
		this.vpd = vp.getVirtualPathDefinition();
	}

	/**
	 * Creates and returns child PathInfo with all of its children sorted.
	 * @param region  The region from which RegionInfo is extracted.
	 * @param parentInfo The parent PathInfo object to update with
	 *             the virtual path's children information.
	 * @return
	 */
	private GemfireVirtualPathInfo createChild(VirtualPath2 vp, GemfireVirtualPathInfo parentInfo)
	{
		GemfireVirtualPathInfo vpInfo = new GemfireVirtualPathInfo(vp, false);
		if (parentInfo != null) {
			parentInfo.setParent(parentInfo);
			parentInfo.getChildList().add(vpInfo);
		}
		List<VirtualPath2> vpList = vp.getChildVirtualPathList();
		for (VirtualPath2 vpPath2 : vpList) {
			createChild(vpPath2, vpInfo);
		}
		Collections.sort(vpInfo.getChildList());
		return vpInfo;
	}
	
	/**
	 * Returns grid region relative path, i.e., without the
	 * top-level region name. The returned path never begins
	 * with "/".
	 */
	@Override
	public String getGridRelativePath()
	{
		if (fullPath == null) {
			return null;
		}
		return GemfireGridUtil.getChildPath(fullPath);
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		name = DataSerializer.readString(input);
		fullPath = DataSerializer.readString(input);
		childList = DataSerializer.readObject(input);
		attrInfo = DataSerializer.readObject(input);
		temporalType = DataSerializer.readObject(input);
		keyTypeName = DataSerializer.readString(input);
		valueTypeName = DataSerializer.readString(input);
		size = DataSerializer.readPrimitiveInt(input);
		vpd = DataSerializer.readObject(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(name, output);
		DataSerializer.writeString(fullPath, output);
		DataSerializer.writeObject(childList, output);
		DataSerializer.writeObject(attrInfo, output);
		DataSerializer.writeObject(temporalType, output);
		DataSerializer.writeString(keyTypeName, output);
		DataSerializer.writeString(valueTypeName, output);
		DataSerializer.writePrimitiveInt(size, output);
		DataSerializer.writeObject(vpd, output);
	}

}

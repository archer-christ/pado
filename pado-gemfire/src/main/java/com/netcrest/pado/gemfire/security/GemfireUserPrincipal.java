/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.gemfire.security;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Set;

import com.gemstone.gemfire.DataSerializer;
import com.gemstone.gemfire.cache.operations.DestroyOperationContext;
import com.gemstone.gemfire.cache.operations.GetOperationContext;
import com.gemstone.gemfire.cache.operations.QueryOperationContext;
import com.netcrest.pado.security.server.UserPrincipal;

/**
 * UserPrincipal contains user principal and authorization logic. This object is
 * built by LdapUserAuthenticator upon successful LDAP authentication and used
 * by LdapUserAuthorization authorizing cache operations.
 * 
 * @author dpark
 * 
 */
public class GemfireUserPrincipal extends UserPrincipal
{
	private static final long serialVersionUID = 1L;

	public GemfireUserPrincipal()
	{
	}
	
	public GemfireUserPrincipal(String domain, String username,
			Set<String> memberOfSet)
	{
		super(domain, username, memberOfSet);
	}

	public GemfireUserPrincipal(String username, Object token,
			Set<String> memberOfList)
	{
		super(username, token, memberOfList);
	}
	
	public boolean isReadAllowed(String fullPath, GetOperationContext goc)
	{
		// TODO: temporary...
		if (fullPath.indexOf("__pado") != -1) {
			return true;
		}
		if (true) {
			return true;
		}

		// authorize at the full-path level
		boolean retval = readWriteGridPathSet.contains(fullPath) || readOnlyGridPathSet.contains(fullPath);

		// You can also authorize at the key/value level.
		// if (retval) {
		// Object key = goc.getKey();
		// if (key instanceof PolIppKey) {
		// PolIppKey polIppKey = (PolIppKey)key;
		// retval = polIppKey.getAgn() < 99;
		// }
		// }
		return retval;
	}

	public boolean isQueryAllowed(QueryOperationContext qoc)
	{
		return true;
	}

	public boolean isDestroyAllowed(String fullPath, DestroyOperationContext doc)
	{
		return true;
	}
	
	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		username = DataSerializer.readString(input);
		domain = DataSerializer.readString(input);
		token = DataSerializer.readObject(input);
		memberOfSet = DataSerializer.readObject(input);
		readOnlyGridPathSet = DataSerializer.readHashSet(input);
		readWriteGridPathSet = DataSerializer.readHashSet(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(username, output);
		DataSerializer.writeString(domain, output);
		DataSerializer.writeObject(token, output);
		DataSerializer.writeObject(memberOfSet, output);
		DataSerializer.writeHashSet(readOnlyGridPathSet, output);
		DataSerializer.writeHashSet(readWriteGridPathSet, output);
	}
}

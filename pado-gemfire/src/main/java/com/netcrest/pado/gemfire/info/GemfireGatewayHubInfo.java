/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.gemfire.info;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.List;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.gemstone.gemfire.cache.util.Gateway;
import com.gemstone.gemfire.cache.util.GatewayHub;
import com.netcrest.pado.info.GatewayHubInfo;

public class GemfireGatewayHubInfo extends GatewayHubInfo implements DataSerializable
{
	private static final long serialVersionUID = 1L;

	private int socketBufferSize;
	private String startupPolicy;

	public GemfireGatewayHubInfo()
	{
	}

	public GemfireGatewayHubInfo(GatewayHub gatewayHub)
	{
		bindAddress = gatewayHub.getBindAddress();
		id = gatewayHub.getId();
		port = gatewayHub.getPort();
		socketBufferSize = gatewayHub.getSocketBufferSize();
		startupPolicy = gatewayHub.getStartupPolicy();

		List<Gateway> gatewayList = gatewayHub.getGateways();
		if (gatewayList != null) {
			for (Gateway gateway : gatewayList) {
				gatewayInfoList.add(new GemfireGatewayInfo(gateway));
			}
		}
	}

	public int getSocketBufferSize()
	{
		return socketBufferSize;
	}

	public void setSocketBufferSize(int socketBufferSize)
	{
		this.socketBufferSize = socketBufferSize;
	}

	public String getStartupPolicy()
	{
		return startupPolicy;
	}

	public void setStartupPolicy(String startupPolicy)
	{
		this.startupPolicy = startupPolicy;
	}


	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		bindAddress = DataSerializer.readString(input);
		id = DataSerializer.readString(input);
		port = DataSerializer.readPrimitiveInt(input);
		socketBufferSize = DataSerializer.readPrimitiveInt(input);
		startupPolicy = DataSerializer.readString(input);
		gatewayInfoList = DataSerializer.readObject(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(bindAddress, output);
		DataSerializer.writeString(id, output);
		DataSerializer.writePrimitiveInt(port, output);
		DataSerializer.writePrimitiveInt(socketBufferSize, output);
		DataSerializer.writeString(startupPolicy, output);
		DataSerializer.writeObject(gatewayInfoList, output);
	}
}
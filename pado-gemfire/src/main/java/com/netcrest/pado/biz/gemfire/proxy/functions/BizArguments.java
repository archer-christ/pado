/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.biz.gemfire.proxy.functions;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.IBizContext;

public class BizArguments implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	private String methodName;
	private IBizContext bizContext;
	private Object[] args;
	private Object[] additionalArgs;
	private Object[] transientData;
	
	public BizArguments() 
	{}
	
	public BizArguments(String methodName, IBizContext bizContext, Object[] args, Object[] additionalArgs, Object[] transientData)
	{
		this.methodName = methodName;
		this.bizContext = bizContext;
		this.args = args;
		this.additionalArgs = additionalArgs;
		this.transientData = transientData;
	}

	public String getMethodName()
	{
		return methodName;
	}

	public IBizContext getBizContext()
	{
		return bizContext;
	}

	public Object[] getArgs()
	{
		return args;
	}
	
	public Object[] getAdditionalArgs()
	{
		return additionalArgs;
	}
	
	public Object[] getTransientData()
	{
		return transientData;
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		methodName = DataSerializer.readString(input);
		bizContext = DataSerializer.readObject(input);
		args = DataSerializer.readObjectArray(input);
		additionalArgs = DataSerializer.readObjectArray(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeString(methodName, output);
		DataSerializer.writeObject(bizContext, output);
		DataSerializer.writeObjectArray(args, output);
		DataSerializer.writeObjectArray(additionalArgs, output);
	}
	
	
}

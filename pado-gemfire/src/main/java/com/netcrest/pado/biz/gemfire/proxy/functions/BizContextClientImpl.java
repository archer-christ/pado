/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.biz.gemfire.proxy.functions;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.IBizContextClient;
import com.netcrest.pado.IDataContext;
import com.netcrest.pado.IGridContextClient;
import com.netcrest.pado.IGridContextServer;
import com.netcrest.pado.IUserContext;
import com.netcrest.pado.biz.IBizStatistics;
import com.netcrest.pado.gemfire.util.DataSerializerEx;
import com.netcrest.pado.internal.impl.GridService;
import com.netcrest.pado.internal.impl.PadoClientManager;

public class BizContextClientImpl implements IBizContextClient, DataSerializable
{
	private static final long serialVersionUID = 1L;
	private String gridId;
	private IUserContext userContext;
	private IDataContext dataContext;
	private transient IGridContextClient gridContextClient = new GridContextClientImpl();
	private transient IGridContextServer gridContextServer;
	private transient GridService gridService;
	private transient IBizStatistics bizStats;

	public BizContextClientImpl()
	{
	}
	
	public BizContextClientImpl(GridService gridService, IBizStatistics bizStats)
	{
		this.gridService = gridService;
		this.bizStats = bizStats;
		
		if (gridService != null) {
			gridId = gridService.getGridId();
		}
		userContext = PadoClientManager.getPadoClientManager().createUserContext(gridService);
		dataContext = PadoClientManager.getPadoClientManager().createDataContext(gridService);
	}

	public IUserContext getUserContext()
	{
		return userContext;
	}

	public IDataContext getDataContext()
	{
		return dataContext;
	}

	public IGridContextClient getGridContextClient()
	{
		return gridContextClient;
	}

	public void setGridContextClient(IGridContextClient gridContextClient)
	{
		this.gridContextClient = gridContextClient;
	}

	public IGridContextServer getGridContextServer()
	{
		return gridContextServer;
	}

	public void setGridContextServer(IGridContextServer gridContextServer)
	{
		this.gridContextServer = gridContextServer;
	}
	
	public GridService getGridService()
	{
		return gridService;
	}

	/**
	 * Returns the grid ID. This value is typically null as most of biz context
	 * objects are constructed by pure clients. From the server-side, this
	 * method can be used to determine the origin of the biz invocation.
	 */
	public String getGridId()
	{
		return gridId;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public IBizStatistics getBizStatistics()
	{
		return bizStats;
	}
	
	@Override
	public void reset()
	{
		gridContextClient.reset();
		if (userContext != null) {
			userContext.reset();
		}
		if (dataContext != null) {
			dataContext.reset();
		}
	}

	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		gridId = DataSerializerEx.readUTF(input);
		userContext = DataSerializer.readObject(input);
		dataContext = DataSerializer.readObject(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializerEx.writeUTF(gridId, output);
		DataSerializer.writeObject(userContext, output);
		DataSerializer.writeObject(dataContext, output);
	}

}
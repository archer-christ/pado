/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.temporal.gemfire;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Set;

import com.gemstone.gemfire.DataSerializable;
import com.netcrest.pado.gemfire.util.DataSerializerEx;
import com.netcrest.pado.temporal.AttachmentSet;
import com.netcrest.pado.temporal.IFilter;

public class GemfireAttachmentSet<K> extends AttachmentSet<K> implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	
	public GemfireAttachmentSet()
	{
	}

	public GemfireAttachmentSet(Set<K> attachments)
	{
		super("default", attachments, null, null, null, null);
	}
	
	public GemfireAttachmentSet(String name, Set<K> attachments)
	{
		super(name, attachments, null, null, null, null);
	}

	public GemfireAttachmentSet(String name, Set<K> attachments, IFilter filter)
	{
		super(name, attachments, null, filter, null, null);
	}

	public GemfireAttachmentSet(String name, Set<K> attachments, String gridPath)
	{
		super(name, attachments, null, null, gridPath, null);
	}
	
	public GemfireAttachmentSet(String name, Set<K> attachments, String queryStatement, IFilter filter, String gridPath, String comment)
	{
		super(name, attachments, queryStatement, filter, gridPath, comment);
	}
	
	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		name = DataSerializerEx.readUTF(input);
		gridPath = DataSerializerEx.readUTF(input);
		queryStatement = DataSerializerEx.readUTF(input);
		attachments = DataSerializerEx.readObject(input);
		filter = DataSerializerEx.readObject(input);
		comment = DataSerializerEx.readUTF(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializerEx.writeUTF(name, output);
		DataSerializerEx.writeUTF(gridPath, output);
		DataSerializerEx.writeUTF(queryStatement, output);
		DataSerializerEx.writeObject(attachments, output);
		DataSerializerEx.writeObject(filter, output);
		DataSerializerEx.writeUTF(comment, output);
	}
}

/*
 * Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netcrest.pado.temporal.gemfire;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;

import com.gemstone.gemfire.DataSerializable;
import com.gemstone.gemfire.DataSerializer;
import com.netcrest.pado.gemfire.util.DataSerializerEx;
import com.netcrest.pado.temporal.TemporalDataList;
import com.netcrest.pado.temporal.TemporalEntry;

public class GemfireTemporalDataList<K, V> extends TemporalDataList<K, V> implements DataSerializable
{
	private static final long serialVersionUID = 1L;
	
	public GemfireTemporalDataList()
	{}
	
	public GemfireTemporalDataList(Object identityKey, TemporalEntry<K, V> lastValue, ArrayList<TemporalEntry<K, V>> temporalList,
			int bucketId, String memberId, String memberName, String host, String fullPath)
	{
		super(identityKey, lastValue, temporalList, bucketId, memberId, memberName, host, fullPath);
	}
	
	/**
	 * Reads the state of this object from the given <code>DataInput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void fromData(DataInput input) throws IOException, ClassNotFoundException
	{
		identityKey = DataSerializer.readObject(input);
		lastEntry = DataSerializer.readObject(input);
		temporalList = DataSerializer.readArrayList(input);
		bucketId = DataSerializer.readPrimitiveInt(input);
		memberId = DataSerializerEx.readUTF(input);
		memberName = DataSerializerEx.readUTF(input);
		host = DataSerializerEx.readUTF(input);
		fullPath = DataSerializerEx.readUTF(input);
	}

	/**
	 * Writes the state of this object to the given <code>DataOutput</code>.
	 * 
	 * @gfcodegen This code is generated by gfcodegen.
	 */
	public void toData(DataOutput output) throws IOException
	{
		DataSerializer.writeObject(identityKey, output);
		DataSerializer.writeObject(lastEntry, output);
		DataSerializer.writeArrayList(temporalList, output);
		DataSerializer.writePrimitiveInt(bucketId, output);
		DataSerializerEx.writeUTF(memberId, output);
		DataSerializerEx.writeUTF(memberName, output);
		DataSerializerEx.writeUTF(host, output);
		DataSerializerEx.writeUTF(fullPath, output);
	}
}
